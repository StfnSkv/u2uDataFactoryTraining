{
	"name": "TripsPerStation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TripCSV",
						"type": "DatasetReference"
					},
					"name": "TripSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DataLakeTemp",
						"type": "DatasetReference"
					},
					"name": "SinkIntoDataLake"
				}
			],
			"transformations": [
				{
					"name": "AggregateStartStation"
				},
				{
					"name": "AggregateEndStation"
				},
				{
					"name": "JoinStation"
				}
			],
			"script": "source(output(\n\t\t{Trip ID} as integer,\n\t\tDuration as short,\n\t\t{Start Date} as timestamp,\n\t\t{Start Station} as string,\n\t\t{Start Terminal} as short,\n\t\t{End Date} as timestamp,\n\t\t{End Station} as string,\n\t\t{End Terminal} as short,\n\t\t{Bike #} as short,\n\t\t{Subscriber Type} as string,\n\t\t{Zip Code} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true,\n\tinferDriftedColumnTypes: true) ~> TripSource\nTripSource aggregate(groupBy(StartStation = {Start Station}),\n\tCount = count({Trip ID}),\n\t\tDurationAvg = avg(Duration)) ~> AggregateStartStation\nTripSource aggregate(groupBy(EndStation = {End Station}),\n\tCount = count({Trip ID}),\n\t\tDurationAvg = avg(Duration)) ~> AggregateEndStation\nAggregateEndStation, AggregateStartStation join(EndStation == StartStation,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinStation\nJoinStation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tmapColumn(\n\t\tEndStation,\n\t\tCount = AggregateEndStation@Count,\n\t\tDurationAvg = AggregateEndStation@DurationAvg,\n\t\tStartStation,\n\t\tCount = AggregateStartStation@Count,\n\t\tDurationAvg = AggregateStartStation@DurationAvg\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkIntoDataLake"
		}
	}
}